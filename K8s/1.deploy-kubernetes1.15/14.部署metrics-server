1.开启聚合层（Aggregation Layer）
开启聚合层apiserver需要配置的参数：
修改master /app/kubernetes/conf/apiserver
新增

CONFIG="--requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/app/kubernetes/ssl/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --proxy-client-cert-file=/app/kubernetes/ssl/front-proxy-client.crt --proxy-client-key-file=/app/kubernetes/ssl/front-proxy-client.key --enable-aggregator-routing=true"

修改 /usr/lib/systemd/system/kube-apiserver.service
[Unit]
Description=Kubernetes API Server
Documentation=https://github.com/kubernetes/kubernetes
[Service]
EnvironmentFile=-/app/kubernetes/config/apiserver
ExecStart=/app/kubernetes/bin/kube-apiserver $KUBE $SSL $IP $ETCDMEMBER $LOGS $COMMON  $CONFIG
Restart=on-failure
[Install]
WantedBy=multi-user.target
 
重启apiserver
systemctl daemon-reload && systemctl restart kube-apiserver.service

2.部署metrcis-server组件
metrics-server版本：v0.3.3
# cd metrics-server-0.3.3/deploy/
# tree 1.8+
1.8+
├── aggregated-metrics-reader.yaml
├── auth-delegator.yaml
├── auth-reader.yaml
├── metrics-apiservice.yaml
├── metrics-server-deployment.yaml
├── metrics-server-service.yaml
└── resource-reader.yaml
 
0 directories, 7 files
 
# cat metrics-server-deployment.yaml
......
      containers:
      - name: metrics-server
        command:
        - /metrics-server
        - --metric-resolution=30s
        - --kubelet-insecure-tls
        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
        image: 10.204.57.39/common/metrics-server-amd64:v0.3.3
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: tmp-dir
          mountPath: /tmp
 
说明：
相较于官方文档，metrics-server-deployment.yaml 做了上面的几项修改：
--metric-resolution=30s 从Kubelet获取指标的时间间隔(默认为60秒),设置为30s
--kubelet-insecure-tls metrics-server从kubelet获取数据时，跳过验证Kubelet CA证书
--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
默认metrcis-server是使用集群的kube-dns或coredns来解析node主机名，但这两个dns默认是不提供node主机名的解析的。（我们的k8s集群是用NodeIp替代了主机名，不存在此问题，但最好加上）


kubectl apply -f 1.8+/
 
# 示例
 kubectl apply -f 1.8+/
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created
serviceaccount/metrics-server created
deployment.extensions/metrics-server created
service/metrics-server created
clusterrole.rbac.authorization.k8s.io/system:metrics-server created
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created


确认是否成功
部署完成后，等待几分钟，通过以下几步来确认是否部署成功：
1、kubectl api-versions 出现 metrics.k8s.io/v1beta1

# kubectl api-versions
...
metrics.k8s.io/v1beta1
...
 
2、kubectl get apiservices.apiregistration.k8s.io

# kubectl get apiservices.apiregistration.k8s.io|grep metrics
v1beta1.metrics.k8s.io                 kube-system/metrics-server   True        3d19h
 
# kubectl get apiservices.apiregistration.k8s.io v1beta1.metrics.k8s.io -o yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  creationTimestamp: "2020-05-07T06:46:10Z"
  name: v1beta1.metrics.k8s.io
  resourceVersion: "18904165"
  selfLink: /apis/apiregistration.k8s.io/v1/apiservices/v1beta1.metrics.k8s.io
  uid: c654db1a-648a-4284-a46d-15568bc8aa66
spec:
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: metrics-server
    namespace: kube-system
    port: 443
  version: v1beta1
  versionPriority: 100
status:
  conditions:
  - lastTransitionTime: "2020-05-07T08:45:13Z"
    message: all checks passed
    reason: Passed
    status: "True"
    type: Available

结果
kubectl top node 

NAME           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
10.204.51.64   141m         1%     3163Mi          21%       
10.204.51.65   96m          1%     2524Mi          16%       
10.204.51.66   101m         1%     2464Mi          16%       
10.204.51.67   85m          1%     3691Mi          24%       
10.204.51.68   87m          1%     4137Mi          27%  
