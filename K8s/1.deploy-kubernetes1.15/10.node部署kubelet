1.创建用户
kubelet 启动时向 kube-apiserver 发送 TLS bootstrapping 请求，需要先将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色(role)， 然后 kubelet 才能有权限创建认证请求(certificate signing requests)：

kubectl create clusterrolebinding kubelet-bootstrap \
  --clusterrole=system:node-bootstrapper \
  --user=kubelet-bootstrap
kubelet 通过认证后向 kube-apiserver 发送 register node 请求，需要先将 kubelet-nodes 用户赋予 system:node cluster角色(role) 和 system:nodes 组(group)， 然后 kubelet 才能有权限创建节点请求：
kubectl create clusterrolebinding kubelet-nodes \
  --clusterrole=system:node \
  --group=system:nodes
  2.配置kubelet 配置文件
  ########
  以10.204.51.64位例，kubelet-config.yaml配置文件的address修改为对应主机的ip ，172.17.0.2为内部dns ip地址，需要跟service在同一网段
cat /app/kubernetes/config/kubelet-config.yaml
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
address: "10.204.51.64"
syncFrequency: 1m
fileCheckFrequency: 20s
httpCheckFrequency: 20s
port: 10250
readOnlyPort: 10255
serverTLSBootstrap: true
authentication:
  anonymous:
    enabled: true
  x509:
    clientCAFile: "/app/kubernetes/ssl/ca.pem"
clusterDomain: "cluster.local"
clusterDNS: 
  - "172.17.0.2"
kubeletCgroups: "/systemd/system.slice"
systemCgroups: ""
cgroupRoot: ""
cgroupDriver: "systemd"
nodeStatusUpdateFrequency: 10s
nodeStatusReportFrequency: 1m
imageMinimumGCAge: 200m
imageGCHighThresholdPercent: 85
imageGCLowThresholdPercent: 80
hairpinMode: promiscuous-bridge
maxPods: 150
resolvConf: /etc/resolv.conf
maxOpenFiles: 1000000
serializeImagePulls: false
kubeReserved:  # 配置 kube 资源预留 
  cpu: 500m 
  memory: 1Gi 
  ephemeral-storage: 1Gi 
systemReserved:  # 配置系统资源预留 
  memory: 1Gi 
  cpu: 1Gi
  ephemeral-storage: 1Gi
evictionHard:
  memory.available: "5000Mi"
  nodefs.available: "1Gi"
  imagefs.available: "50Gi"
containerLogMaxSize: "20Mi"
containerLogMaxFiles: "10"
registry-burst: "50"
registry-qps: "100"


  
cat /app/kubernetes/config/kubelet
KUBELET_ARGS=" --kube-api-qps=100 --pod-infra-container-image=10.204.57.39/common/pause-amd64:3.0 --runtime-cgroups=/systemd/system.slice --bootstrap-kubeconfig=/app/kubernetes/ssl/bootstrap.kubeconfig --kubeconfig=/app/kubernetes/ssl/kubelet.kubeconfig --cert-dir=/app/kubernetes/ssl --image-pull-progress-deadline=15m --root-dir=/app/kubernetes/data/kubelet  --cpu-cfs-quota-period=5ms "
LOGS="--logtostderr=false --v=2 --log-dir=/app/kubernetes/logs"
CONFIG="--config=/app/kubernetes/config/kubelet-config.yaml"
HOSTNAME="--hostname-override=10.204.51.64"


cat /usr/lib/systemd/system/kubelet.service 

[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=docker.service
Requires=docker.service

[Service]
WorkingDirectory=/app/kubernetes/data/kubelet
EnvironmentFile=-/app/kubernetes/config/kubelet
ExecStart=/app/kubernetes/bin/kubelet $KUBELET_ARGS $LOGS $CONFIG $HOSTNAME 
Restart=on-failure

[Install]
WantedBy=multi-user.target


systemctl enable kubelet && systemctl start kubelet

将node节点加入到集群 在master节点上 执行
kubectl certificate approve `kubectl get csr | awk '{ print $1}'`
查看node
kubectl get node
修改node 标签角色
kubectl label node 10.204.51.64 node-role.kubernetes.io/node=node
结果
[root@k8s-node64 bin]# kubectl get node
NAME           STATUS   ROLES   AGE   VERSION
10.204.51.64   Ready    node    87s   v1.15.0


