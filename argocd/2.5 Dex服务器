Dex（https://github.com/dexidp/dex）用于在涉及外部系统时委托身份验证，例如在使用OIDC时。
因为dex保存内存缓存，我们不能使用多个实例；否则，我们会有不一致的风险。
如果它下降，我们面临的风险是无法使用外部系统登录。
这并不重要，因为Argo CD继续做所有必要的和解，所以它仍然应该连接到Git回购和Kubernetes 集群的目的地，
这意味着它的工作不会停止。
登录停机应该是临时的，因为通过作为一个副本部署安装，控制器将重新启动实例（有时，当涉及到节点问题时，
它会在我们的帮助下这样做）。
如果你只使用本地用户（我们将在第4章，访问控制中了解更多关于他们的信息）或管理特殊用户，
那么你可以通过将副本的数量设置为零来禁用dex安装。
HA是减少服务中断风险的最佳实践之一。
即使Argo CD实例关闭了一小段时间，你也不希望在执行任何类型的生产部署或回滚时发生这种情况。
因此，通过在Argo CD组件中构建冗余和弹性来消除单点故障变得至关重要。
幸运的是，我们从盒子里拿出了HA的清单。
一旦我们了解了如何将每个组件修改为高可用性，我们就可以采取更多步骤来改进服务，
从使用更多的副本到拆分Kubernetes集群，我们将应用程序部署到更多的应用程序控制器。
接下来，我们将讨论灾难恢复，这是关于让系统在失效后恢复到工作状态。
这可以帮助我们在HA还不够的地方把事情恢复正常。
