  存储库（repo）服务器是生成要应用于集群的资源的重要组件。通常，在我们的GitOps回购中，我们不使用简单的清单；相反，我们使用模板引擎，如头盔、十四行诗和Kustomize。此组件正在将这些模板转换为准备与kubectlapcle命令一起应用的清单。它去获取Git回购的内容，基于它知道是否使用帮助、注释或其他东西（例如，如果它找到一个名为图表的文件。yaml，它知道它是一个帮助图表）。在发现模板引擎是什么之后，它将运行诸如掌舵模板和模板构建等命令，以生成最终的清单。对于Helm，它可能需要提前更新掌舵程序来获取任何外部依赖项。
 在这个存储库服务器应用程序中发生了很多事情，这意味着如果我们运行它的多个实例，我们将能够并行生成更多的清单。提供足够的资源以使这些容器不会因为内存不足的错误或CPU上的限制而被杀死也是有意义的。如果你有数千个应用程序已经部署了Argo CD，那么你可以轻松地运行10多个存储库服务器实例，并为每个实例分配诸如4到5个cpu和8到10 GB内存之类的东西。从HA清单中，我们已经有了两个实例了，但是我们将修改它，使它有三个实例。我们不会放置任何资源请求或限制，因为我们使用本地集群，但是对于实际集群，强烈建议这样做。
 注意-修复服务器的性能
 ** **我使用存储库服务器的经验受到了Helm 2的使用的严重影响。当我们将大部分图表迁移到Helm 3时，我们运行了一些测试，并意识到这一移动显著减少了清单生成时间（至少在某些情况下，这在我们的设置中仍然经常发生）。因此，你应该稍微保留一下前面的容器资源建议，并自己进行计算。
 我们可能需要修改的另一个重要参数是模板引擎的超时。Argo CD分叉帮助或引导命令，并为这些操作设置90秒的超时。有时，这可能还不够，比如当库斯提兹使用大的远程基地，或者当赫尔姆需要模板大的图表，如 kube-prometheus-stack （https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack它曾经被称为普罗米修斯操作员）或istio (https://istio.io/latest/docs/setup/install/helm/).因此，你可以运行一些测试，看看什么对你有用。如果要增加超时时间，则可以使用ARGOCD_EXEC_TIMEOUT环境变量。